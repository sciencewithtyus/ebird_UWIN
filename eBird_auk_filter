# R script for loading in eBird using the Auk package #
# eBird api key: m0h35jpf0c41
ebird.key <- ("m0h35jpf0c41")
# cran release
install.packages("auk")
# Getting started with loading in the data
library(auk)
# set the directory for the location where the data is saved 
ebd_dir <- here("ch2aviancats/ebd_data_2024")

#### Step 1: Cleaning up the dataset ####
#ebd file pathway
ebd_in <- file.path(ebd_dir, "ebd_relJan_2024.txt") # location of our file for ebird data
ebd_clean <- file.path(ebd_dir, "ebd_relJan_2024_clean.txt")
auk_clean(ebd_in, f_out = ebd_clean, remove_text = TRUE) # this spits out the clean text in new file
# Sampling file pathway
ebd_sampling <- file.path(ebd_dir, "ebd_sampling.txt")
ebd_sampling_clean <- file.path(ebd_dir, "ebd_sampling_clean.txt")
auk_clean(ebd_sampling, f_out = ebd_sampling_clean, remove_text = TRUE) # gives us a new sampling event txt file

#### Step 2: Filtering the ebird dataset to specification ####
# define the paths for the ebd and sampling event files
f_in_ebd <- file.path(ebd_dir, "ebd_relJan_2024_clean.txt")
f_in_sampling <- file.path(ebd_dir, "ebd_sampling_clean.txt")
# create an object referencing these files
auk_ebd(file = f_in_ebd, file_sampling = f_in_sampling) # filters have not been set for the object

# define an EBD reference and a set of filters, make sure to include sampling events as well
auk_ebd(ebd_in, ebd_sampling) %>% 
  # now we define our filters, should I include the date?
  auk_bbox(eb_outline) %>% 
  auk_complete()
 # now we check to see if everything was filtered correctly, looks good!

# now we actually have to filter out the data properly and store them in corresponding text files
  f_out_ebd <- file.path(ebd_dir, "ebd_filtered.txt")
  f_out_sampling <- file.path(ebd_dir, "ebd_filtered_sampling.txt") # here out the output files
  
  # define the filters
 ebd_filter <- auk_bbox(eb_outline) %>%
  auk_complete() %>% 
  auk_filter(file = f_out_ebd, file_sampling = f_out_sampling, overwrite = TRUE) # might take some time
 
 ebd_filtered <- auk_ebd(f_in_ebd, f_in_sampling) %>% 
   auk_bbox(bpbox) %>%
   auk_complete() %>% # bounding box filter
   auk_filter(file = f_out_ebd, overwrite = TRUE)
  
### Step 3: Importing the filtered ebird data ####
ebd <- read_ebd(f_out_ebd) # this is my presence-only data and information, original data
presence_ebd <- read_ebd(f_out_ebd) # for the sample data piece
glimpse(ebd) # this gives us a look at the data structure! We have 652k observations!

### Step 4: Pre-processing the dataset ####
glimpse(ebird_taxonomy) # if we want to see the details of the ebird taxonomy list
# we can see what the auk_rollup does to our dataset
auk_rollup(ebd) # its actually still the same since we didn't declare false in the read_ebd
unique(ebd$category) # everything looks good here
# if we want to keep the group checklists and unique categories we declare FALSE in the read_ebd

### Step 5: Now we have to zero-fill our data ####
# now we zero fill our dataset to get presence and absence information
ebd_zf <- auk_zerofill(f_out_ebd, f_out_sampling) # this is presence and absense data
ebd_zf # this should look correct now with the zero fill function, 35k unique checklists for 340 species
# now we merge the two dataframes together using the collapse function for zerofill
ebd_zf_df <- collapse_zerofill(ebd_zf) # this is my complete checklist!!! Extract this! 12 million observations!
# this merges the two dfs, this can be used for distribution modeling, filter this later

### Step 6: mapping the subset of ebird data using the east bay outline ####
# convert to sf object, this is presence only
ebd_sf <- ebd %>% 
  group_by(common_name) %>% 
  st_as_sf( coords = c("longitude", "latitude"), crs = 4326) # EPSG: 4326 is for WGS84!, change to eb_outline 

complete_sf <- ebd_zf_df %>% 
  group_by(scientific_name) %>% 
  st_as_sf( coords = c("longitude", "latitude"), crs = 4326)

# put polygons in same crs
poly_ll <- st_transform(eb_outline, crs = st_crs(ebd_sf)) # this is only if we need to transform our polygon

# identify points in polygon
in_poly <- st_within(ebd_sf, poly_ll, sparse = FALSE)

# although coordinates are longitude/latitude, st_within assumes that they are planar

# subset data frame
ebd_in_eastbay <- ebd[in_poly[, 1], ] # this is our subset dataframe working in the east bay!

# now we can create a simple map looking at EBD observations after spatial subsetting
par(mar = c(0, 0, 0, 0))
plot(eb_outline %>% st_geometry(), col = "grey40", border = NA)
plot(ebd_sf, col = "black", pch = 19, cex = 0.5, add = TRUE)
plot(ebd_sf[in_poly[, 1], ], 
     col = "forestgreen", pch = 19, cex = 0.5, 
     add = TRUE)
legend("top", 
       legend = c("All observations", "After spatial subsetting"), 
       col = c("grey40", "forestgreen"), 
       pch = 19,
       bty = "n",
       ncol = 2)

# lets make a map looking at the observation of different bird species from ebird
par(mar = c(0, 0, 0, 0), bg = "skyblue")
# plot the east bay boundary
plot(eb_outline %>% st_geometry(), col = "grey40", border = "white")
# plot the ebird data of interest
plot(ebd_sf %>% filter(common_name == "California Towhee"),
     col = "red3", pch = 19, cex = 0.75, add = TRUE)
plot(ebd_sf %>% filter(common_name == "Dark-eyed Junco") %>% st_geometry(),
     col = "green3", pch = 19, cex = 0.75, add = TRUE)


```
